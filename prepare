#!/bin/sh
# I prepare your local repo to be able to build Snap4Arduino.

# Include print_utils
. ./print_utils

print_help() {
    echo "    --snap              Pulls the latest Snap! version."
    echo "    --nwjs              Pulls the latest nwjs.io stable version."
    echo "    --desktop           Pulls all NodeJS modules needed for desktop versions."
    echo "    --chromium          Pulls all NodeJS modules needed for the web extension."
    echo "    --cli               Pulls all NodeJS modules needed for command-line version."
    echo "    --all               Does all of the above."
    echo
}

if test $# -eq 0; then
    print_help
    exit 0
fi

# parse parameters

while echo $1 | grep ^- > /dev/null; do eval $( echo $1 | sed 's/-//g' | sed 's/=.*//g' | tr -d '\012')=$( echo $1 | sed 's/.*=//g' | tr -d '\012'); shift; done

if test -n "$help"; then
    print_help
    exit 0
fi

# prepare functions

pull_snap() {
    if ! git submodule update --init --recursive; then
        print_error "Could not set up Snap! git submodule.\nPlease make sure that you have access to the Internet and git is installed in your system."
        exit 1
    fi
    cd src/snap
    git checkout master
    if ! git pull; then
        print_error "Could not pull latest Snap! version from Git.\nPlease make sure that you have access to the Internet and git is installed in your system."
        cd ../..
        exit 1
    fi
    cd ../..
    print_ok "Snap! sources up to date."
}

pull_nwjs() {
    mkdir -p environments
    cd environments
    if ! npm install nw-builder; then
        print_error "Could not install nw-builder. Won't be able to build any desktop version.\nPlease make sure that you have access to the Internet and both NodeJS and npm are installed in your system."
        cd ..
        exit 1
    fi
    cd ..
    print_ok "nwjs.io installed."
}

pull_desktop_modules() {
    cd environments
    rm -rf desktop
    mkdir desktop
    cd desktop
    wget http://vps34736.ovh.net/snap4arduino/desktop_node_modules.zip
    if ! test -e desktop_node_modules.zip; then
        print_error "Could not fetch NodeJS modules.\nPlease make sure that you have access to the Internet."
        cd ../..
        exit 1
    fi
    if ! unzip desktop_node_modules.zip; then
        print_error "Could not unpack NodeJS modules.\nZip file seems to be corrupted, please try again."
        rm desktop_node_modules.zip
        cd ../..
        exit 1
    fi 
    rm desktop_node_modules.zip
    cd ../..
    print_ok "Desktop NodeJS modules fetched."
}

pull_cli_modules() {
    cd environments
    rm -rf embedded/cli
    mkdir -p embedded/cli
    cd embedded/cli
    wget http://vps34736.ovh.net/snap4arduino/cli_node_modules.zip
    if ! test -e cli_node_modules.zip; then
        print_error "Could not fetch NodeJS modules.\nPlease make sure that you have access to the Internet."
        cd ../../..
        exit 1
    fi
    if ! unzip cli_node_modules.zip; then
        print_error "Could not unpack NodeJS modules.\nZip file seems to be corrupted, please try again."
        rm cli_node_modules.zip
        cd ../../..
        exit 1
    fi 
    rm cli_node_modules.zip
    cd ../../..
    print_ok "Command line NodeJS modules fetched."
}

pull_chromium_modules() {
    cd environments
    rm -rf web/chromium/node_modules
    mkdir -p web/chromium
    cd web/chromium
    wget http://vps34736.ovh.net/snap4arduino/chromium_node_modules.zip
    if ! test -e chromium_node_modules.zip; then
        print_error "Could not fetch NodeJS modules.\nPlease make sure that you have access to the Internet."
        cd ../../..
        exit 1
    fi
    if ! unzip chromium_node_modules.zip; then
        print_error "Could not unpack NodeJS modules.\nZip file seems to be corrupted, please try again."
        rm chromium_node_modules.zip
        cd ../../..
        exit 1
    fi 
    rm chromium_node_modules.zip
    cd ../../..
    print_ok "Chromium extension NodeJS modules fetched."
    if ! test -e environments/web/chromium/Snap4Arduino.pem; then
        print_warning "Please make sure to place your Snap4Arduino.pem Chromium extension private key under environments/web/chromium"
        echo "I cannot do this for you because, you know, it's a private key ;)"
    fi
}

if test -n "$all"; then
    pull_snap
    pull_nwjs
    pull_desktop_modules
    pull_cli_modules
    pull_chromium_modules
    exit 0
fi

if test -n "$snap"; then
    pull_snap
fi

if test -n "$nwjs"; then
    pull_nwjs
fi

if test -n "$desktop"; then
    pull_desktop_modules
fi

if test -n "$cli"; then
    pull_cli_modules
fi

if test -n "$chromium"; then
    pull_chromium_modules
fi
